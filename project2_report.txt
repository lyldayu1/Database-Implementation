1. Basic information
Team number (e.g., 01) : 13
#1 Student ID : 86808780
#1 Student Name : Jiawei Gu
#2 Student ID : 48895604
#2 Student Name : Yuliang Liu
OS (bit) : Ubuntu 16.04 (64-bit)
gcc version : 5.4.0


2. Meta-data
- Show your meta-data design (Tables and Columns table) and information about each column.

Table structure
-------------------------------
ID| column name | column type |
-------------------------------
1 | table-id    |     int     |
-------------------------------
2 | table-name  | varchar(50) |
-------------------------------
3 | file-name   | varchar(50) |
-------------------------------
4 |   is_sys    |     int     |
-------------------------------

The 4th column (is_sys) represent if the table is system table

Columns structure
   
-----------------------------------
ID|   column name   | column type |
-----------------------------------
1 |    table-id     |     int     |
-----------------------------------
2 |   column-name   | varchar(50) |
-----------------------------------
3 |   column-type   |     int     |
-----------------------------------
4 |  column-length  |     int     |
-----------------------------------
5 | column-position |     int     |
-----------------------------------
6 |  startVersion   |     int     |
-----------------------------------
7 |   endVersion    |     int     |
-----------------------------------

3. Internal Record Format
- Show your record format design and describe how your design satisfies O(1) field access. If not, just mention that your team hasn't implemented this feature.
- Describe how you store a VarChar field.
- Describe how you deal with an update and delete.
(1) In each slot of a record, first I use 2 bytes to store the size of this slot. Then I use 2 bytes to store the number of fields in this record (including the null fields). After that, I store a table of the offset of each field, which size is 2n bytes. If a field is null, its offset will be -1. In the end, I store the original data obtained from given data (excluding the null field indicator). As we know the offset of the nth field, we can access the nth field in O(1) time.
A brief structure of record format design:
0          2            3         4          6              8             10                             n
----------------------------------------------------------------------------------------------------------
| slotSize | updateMark | version | fieldNum | fieldOffset1 | fieldOffset2 | ... | field1 | field2 | ... |
----------------------------------------------------------------------------------------------------------
|                                                                                ^
---------------------------------- fieldOffset1 ---------------------------------|
(2) I use the same method as the one in given data to store a VarChar field. That is, first use a nameLength of 4 bytes to show how long is that string, and then store the content of that string continuously.
(3) For updating record, first I will check the sizes of old record and new record. If the size of new record is smaller than or equal to that of old record, I will update the old record in the same location and update the slot table. Then I will move the other record in the back forward to reduce the space hole. If the size of new record is larger than that of old record, first I will remove the fieldInfo and data of old record, and change the value of updateMark into 1. Then I will insert this record in another page, change the updateMark of that record into 2, and write the returned RID in the back of the original slot. If we are updataing a record containing a tombstone, we will first delete its child record, insert a new record, and update the new RID in the original slot.
For deleting record, I will remove that slot, move forward other slots in the back, and update the slot table.


4. Page Format
- Show your page format design.
- Describe how you deal with an update and delete.
(1) In the head of each page, I use 2 bytes to store the total used size of the page. Then I store each slot one by one after page size. The design of slot is shown in the record format design, and its length is not fixed. In the end of the page, I store the slot offset table of the page. Each slot offset shows the start position of corresponding slot.
A brief structure of page format design:
---------------------------------------------------
| PageSize | Slot0 | Slot1 | ... |                |
|                                                 |
|                    FREESPACE                    |
|                                                 |
|     | ... | Slot1Offset | Slot0Offset | SlotNum |
---------------------------------------------------
(2) After updating a record, the slot table will keep the same, and we only change the updateMark in the slot.
After deleting a record, the slot offset in the slot table will change into -1, and the offsets of other slots will be refreshed.


5. File Format
- Show your file format design
I store the metadata in the first page. The metadata includes the readPageCounter, writePageCounter, appendPageCounter, the total number of pages, and insertCounter. Every time when creating a file, 5 zeros will be written into that file. Every time when opening a file, these numbers will be loaded into memory. Every time these four variables are renewed, I will refresh them in the file. 
A brief structure of metadata format design:
0                 2                  4                   6              8              10
-----------------------------------------------------------------------------------------
| readPageCounter | writePageCounter | appendPageCounter | totalPageNum | insertCounter |
-----------------------------------------------------------------------------------------


6. Implementation Detail
- Other implementation details goes here.
We also implemented the add attribute and drop attribute function. We use the version schema to control the version of each field. In the column table, we have two fields: startVersion and endVersion. startVersion indicates the version that the field begins to appear, and endVersion indicates the last version that field appears.
Every time when we add an attribute in a table, we will add 1 to the current version of that table, and refresh the endVersion of all the field in that table. Then we will insert a new field in that table, which startVersion = endVersion = currentVersion.
Every time when we drop an attribute in a table, we will add 1 to the current version of that table, and refresh the endVersion of all the field except the dropped field in that table. But we will still keep the dropped field in the table for future scan.


7. Other (optional)
- Freely use this section to tell us about things that are related to the project 2, but not related to the other sections (optional)


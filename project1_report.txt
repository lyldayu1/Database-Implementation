1. Basic information
Student ID : 86808780
Student Name : Jiawei Gu
OS (bit) : Ubuntu 14.04 (64-bit)
gcc version : 4.8.4


2. Internal Record Format
- Show your record format design and describe how your design satisfies O(1) field access. If not, just mention that you haven't implemented this feature.
- Describe how you store a VarChar field.
(1) In each slot of a record, first I use 2 bytes to store the size of this slot. Then I use 2 bytes to store the number of fields in this record (including the null fields). After that, I store a table of the offset of each field, which size is 2n bytes. If a field is null, its offset will be -1. In the end, I store the original data obtained from given data (excluding the null field indicator). As we know the offset of the nth field, we can access the nth field in O(1) time.
A brief structure of record format design:
0          2          4              6              8                           n
-----------------------------------------------------------------------------------
| slotSize | fieldNum | fieldOffset1 | fieldOffset2 | ... | field1 | field2 | ... |
-----------------------------------------------------------------------------------
|                                                       ^
---------------------- fieldOffset1 --------------------|
(2) I use the same method as the one in given data to store a VarChar field. That is, first use a nameLength of 4 bytes to show how long is that string, and then store the content of that string continuously.


3. Page Format
- Show your page format design
In the head of each page, I use 2 bytes to store the total used size of the page. Then I store each slot one by one after page size. The design of slot is shown in the record format design, and its length is not fixed. In the end of the page, I store the slot offset table of the page. Each slot offset shows the start position of corresponding slot.
A brief structure of page format design:
---------------------------------------------------
| PageSize | Slot0 | Slot1 | ... |                |
|                                                 |
|                    FREESPACE                    |
|                                                 |
|     | ... | Slot1Offset | Slot0Offset | SlotNum |
---------------------------------------------------


4. Implementation Detail
- Other implementation details goes here.
(1) I store the metadata in the first page. The metadata includes the readPageCounter, writePageCounter, appendPageCounter, and the total number of pages. Every time when creating a file, 4 zeros will be written into that file. Every time when opening a file, these numbers will be loaded into memory. Every time these four variables are renewed, I will refresh them in the file. 
A brief structure of metadata format design:
0                 2                  4                   6              8
-------------------------------------------------------------------------
| readPageCounter | writePageCounter | appendPageCounter | totalPageNum |
-------------------------------------------------------------------------
(2) In order to reduce the time of I/O to improve performance, I also store all the page sizes in a vector in memory. When opening a file, if pages already exist in the file, I will load the page size of each page into the memory. So every time when inserting a record, I just need to check that vector to find out whether there is enough free space in a page, instead of reading the file to get the size of a page.


5. Other (optional)
- Freely use this section to tell us about things that are related to the project 1, but not related to the other sections (optional)

